[agent]
  interval = "20s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false

[[outputs.influxdb_v2]]
  urls = ["https://eu-central-1-1.aws.cloud2.influxdata.com"]
  token = "$INFLUX_TOKEN"
  organization = "Filecoin Station"
  bucket = "voyager-telegraf"

[[inputs.http]]
  urls = ["https://api.node.glif.io/rpc/v0"]
  data_format = "json_v2"
  method = "POST"
  body = '''
  {"jsonrpc":"2.0","method":"Filecoin.WalletBalance","params":["f410f7r55f5drots2se43ww44ai6eyax2fjfyfwphpyy"],"id":1}
  '''
  headers = {"Authorization" = "Bearer ${GLIF_TOKEN}"}
  [[inputs.http.json_v2]]
    measurement_name = "meridian"
      [[inputs.http.json_v2.field]]
        path = "@this.result"
        rename = "measureServiceBalance"

[[inputs.http]]
  urls = ["https://api.node.glif.io/rpc/v0"]
  data_format = "json_v2"
  method = "POST"
  body = '''
  {"jsonrpc":"2.0","method":"Filecoin.WalletBalance","params":["f410fkdm2qoofuw7tggw4ouc5woh6tagrfhtaz2wc7eq"],"id":1}
  '''
  headers = {"Authorization" = "Bearer ${GLIF_TOKEN}"}
  [[inputs.http.json_v2]]
    measurement_name = "meridian"
      [[inputs.http.json_v2.field]]
        path = "@this.result"
        rename = "evaluateServiceBalance"

[[inputs.http]]
  urls = ["https://api.node.glif.io/rpc/v1"]
  data_format = "json_v2"
  method = "POST"
  body = '''
  {"jsonrpc":"2.0","method":"Filecoin.WalletBalance","params":["f410fyuslqo7ykaq6m5fhzhyy6u4bc6p2xl3mrdgdcyy"],"id":1}
  '''
  headers = {"Authorization" = "Bearer ${GLIF_TOKEN}"}
  [[inputs.http.json_v2]]
    measurement_name = "meridian"
      [[inputs.http.json_v2.field]]
        path = "@this.result"
        rename = "contractBalance"

[[inputs.http]]
  urls = ["https://api.node.glif.io/rpc/v0"]
  data_format = "json_v2"
  method = "POST"
  body = '''
  {"jsonrpc":"2.0","method":"eth_call","params":[{"to":"0xc524b83bf85021e674a7c9f18f5381179fabaf6c","data":"0x6896ef4b"},"latest"],"id":1}
  '''
  headers = {"Authorization" = "Bearer ${GLIF_TOKEN}"}
  [[inputs.http.json_v2]]
    measurement_name = "meridian"
      [[inputs.http.json_v2.field]]
        path = "@this.result"
        rename = "roundIndex"

[[inputs.http]]
  urls = ["https://api.node.glif.io/rpc/v0"]
  data_format = "json_v2"
  method = "POST"
  body = '''
  {"jsonrpc":"2.0","method":"eth_call","params":[{"to":"0xc524b83bf85021e674a7c9f18f5381179fabaf6c","data":"0xf199f56d"},"latest"],"id":1}
  '''
  headers = {"Authorization" = "Bearer ${GLIF_TOKEN}"}
  [[inputs.http.json_v2]]
    measurement_name = "meridian"
      [[inputs.http.json_v2.field]]
        path = "@this.result"
        rename = "roundReward"

[[inputs.http]]
  urls = ["https://api.node.glif.io/rpc/v0"]
  data_format = "json_v2"
  method = "POST"
  body = '''
  {"jsonrpc":"2.0","method":"eth_call","params":[{"to":"0xc524b83bf85021e674a7c9f18f5381179fabaf6c","data":"0x9384c885"},"latest"],"id":1}
  '''
  headers = {"Authorization" = "Bearer ${GLIF_TOKEN}"}
  [[inputs.http.json_v2]]
    measurement_name = "meridian"
      [[inputs.http.json_v2.field]]
        path = "@this.result"
        rename = "nextRoundLength"

[[inputs.http]]
  urls = ["https://api.node.glif.io/rpc/v0"]
  data_format = "json_v2"
  method = "POST"
  body = '''
  {"jsonrpc":"2.0","method":"eth_call","params":[{"to":"0xc524b83bf85021e674a7c9f18f5381179fabaf6c","data":"0xd3120352"},"latest"],"id":1}
  '''
  headers = {"Authorization" = "Bearer ${GLIF_TOKEN}"}
  [[inputs.http.json_v2]]
    measurement_name = "meridian"
      [[inputs.http.json_v2.field]]
        path = "@this.result"
        rename = "participantCountReadyForTransfer"

[[inputs.http]]
  urls = ["https://api.node.glif.io/rpc/v0"]
  data_format = "json_v2"
  method = "POST"
  body = '''
  {"jsonrpc":"2.0","method":"eth_call","params":[{"to":"0xc524b83bf85021e674a7c9f18f5381179fabaf6c","data":"0x0f881326"},"latest"],"id":1}
  '''
  headers = {"Authorization" = "Bearer ${GLIF_TOKEN}"}
  [[inputs.http.json_v2]]
    measurement_name = "meridian"
      [[inputs.http.json_v2.field]]
        path = "@this.result"
        rename = "participantCountScheduledForTransfer"

[[inputs.http]]
  urls = ["https://api.node.glif.io/rpc/v0"]
  data_format = "json_v2"
  method = "POST"
  body = '''
  {"jsonrpc":"2.0","method":"eth_call","params":[{"to":"0xc524b83bf85021e674a7c9f18f5381179fabaf6c","data":"0x624c6be7"},"latest"],"id":1}
  '''
  headers = {"Authorization" = "Bearer ${GLIF_TOKEN}"}
  [[inputs.http.json_v2]]
    measurement_name = "meridian"
      [[inputs.http.json_v2.field]]
        path = "@this.result"
        rename = "balanceHeld"

[[inputs.http]]
  urls = ["https://api.node.glif.io/rpc/v0"]
  data_format = "json_v2"
  method = "POST"
  body = '''
  {"jsonrpc":"2.0","method":"eth_call","params":[{"to":"0xc524b83bf85021e674a7c9f18f5381179fabaf6c","data":"0xab2f0e51"},"latest"],"id":1}
  '''
  headers = {"Authorization" = "Bearer ${GLIF_TOKEN}"}
  [[inputs.http.json_v2]]
    measurement_name = "meridian"
      [[inputs.http.json_v2.field]]
        path = "@this.result"
        rename = "availableBalance"

[[inputs.exec]]
  commands = ["sh /usr/bin/meridian-gas.sh"]
  data_format = "influx"

# See https://github.com/influxdata/telegraf/tree/master/plugins/inputs/postgresql_extensible
[[inputs.postgresql_extensible]]
  address = "${DATABASE_URL}"
  prepared_statements = true

[[inputs.postgresql_extensible.query]]
  measurement="pg_stat_database"
  sqlquery="SELECT * FROM pg_stat_database WHERE datname = 'voyager-db'"
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  measurement="pg_stat_user_tables"
  sqlquery="SELECT * FROM pg_stat_user_tables"
  tagvalue="relname"

[[inputs.postgresql_extensible.query]]
  measurement="pg_stat_statements_slowest_mean_exec_time"
  sqlquery="SELECT * FROM pg_stat_statements ORDER BY mean_exec_time DESC LIMIT 1"
  tagvalue=""

[[inputs.postgresql_extensible.query]]
  measurement="pg_stat_statements_slowest_total_exec_time"
  sqlquery="SELECT * FROM pg_stat_statements ORDER BY total_exec_time DESC LIMIT 1"
  tagvalue=""

# [[inputs.postgresql_extensible.query]]
#   measurement="unpublished_measurements"
#   sqlquery='''
#     SELECT
#       COUNT(*) AS total_count,
#       FLOOR(EXTRACT(epoch FROM (now() - MIN(finished_at))))::INTEGER AS max_age_in_seconds
#     FROM measurements
#   '''
#   tagvalue=""
